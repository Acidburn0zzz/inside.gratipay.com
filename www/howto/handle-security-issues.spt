nav_title = 'Handle Security Issues'
[---]
[---] text/html via markdown

*Are you a security researcher? Please visit our
[HackerOne page](https://hackerone.com/gratipay). This document is for
internal Gratipay staff.*

We [use HackerOne](https://hackerone.com/gratipay) to manage our security
[queue](./manage-queues). HackerOne assigns seven reputation points for
reporting a bug, and two for reporting a duplicate. Therefore, if you need to
reticket anything from a HackerOne bug, be sure to have the original researcher
make the reticket so that they get the credit. Publicly disclose all resolved
HackerOne tickets.

We support email as a fall-back reporting mechanism. When we receive
disclosures on security@gratipay.com, ask the researcher to [file a
report](https://hackerone.com/gratipay/reports/new) at HackerOne instead. If
they are unresponsive or don't want to use HackerOne, then file the issue
yourself so we can manage the issue there (you'll get the reputation points in
this case). If the researcher doesn't join HackerOne, offer to add them to the
[old Hall of Fame](https://gratipay.com/about/security/hall-of-fame) instead.


## Code Changes

If an issue requires code changes, create a private repo in GitHub, using the
naming convention `security-deadbeef`, then do this:

```
repo=security-xxxxxx
branch=some-branch-name
git remote add $repo "git@github.com:gratipay/$repo.git"
git push $repo master:upstream
# ^ This takes a while, gratipay's history is pretty big and full of tarballs
git push -u $repo $branch:$branch
```

Here's how to deploy code changes before merging back to upstream:

```
git checkout master && git pull
git merge $branch
make test  # can't be too careful, right?
./release.sh
```

Once the issue is resolved and any fix is deployed, make the repo public.
