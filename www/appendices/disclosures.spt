import json
import urllib
from decimal import Decimal as D
from os.path import dirname, join

nav_title = 'Security Disclosures'
nav_children = []

# Workaround a limitation in dev where urllib.urlopen often blocks indefinitely(?!)
# www/appendices/disclosures.json is in .gitignore
try:
    raw = open(join(dirname(__file__), 'disclosures.json')).read()
except IOError:
    def get_raw():
        url = 'https://hackerone.com/gratipay/reports/public'
        return urllib.urlopen(url).read()
else:
    def get_raw():
        return raw

[---]

def group(reports):
    cur = ['9999', '99', '99']
    for report in reports:

        ts = []
        year, month, day = report['disclosed_at'][:10].split('-')
        new = [year, month, day]
        if year != cur[0]:
            ts.append(year)
        if month != cur[1]:
            ts.append(month)
        if day != cur[2]:
            ts.append(day)
        cur = new

        map(int, new + [report['id']])  # quick validation, will fail with ValueError if invalid

        ts_mute = '-'.join(cur[:-len(ts)] if ts else cur)
        if ts_mute and ts:
            ts_mute += '-'
        ts_pop = '-'.join(ts)

        url = 'https://hackerone.com/reports/{id}'.format(**report)
        title = report['title']
        yield ts_mute, ts_pop, url, title


def grouped(all_reports):
    groups = [ ('Severe Risk',                 40, [])
             , ('Moderate Risk',               10, [])
             , ('Mild Risk',                    1, [])
             , ('Theoretical Risk',             0, [])
             , ('No Risk',          float('-inf'), [])
              ]
    for report in all_reports:
        for _, lo, reports in groups:
            bounty = D(report.get('bounty', 0))
            if bounty > lo:
                reports.append(report)
                break
    for header, _, reports in groups:
        yield header, list(group(reports))


raw = get_raw()
reports = json.loads(raw)
for report in reports:  # standardize bounty values
    report['bounty'] = D(report.get('bounty', 0))
reports.sort(key=lambda r: r['bounty'])
groups = grouped(reports)

[---] text/html
<style>
    h2 {
        margin: 24px 0 0;
    }
    .reports {
        display: block;
        width: 100%;
        margin: 0;
    }
    .reports td {
        padding-bottom: 5px;
        vertical-align: top;
        white-space: nowrap;
    }
    .reports td.ts {
        text-align: right;
        font-family: monospace;
        width: 30%;
    }
    .reports td.ts .mute {
        opacity: 0.2;
    }
    .reports td.ts .pop {
        opacity: 1;
    }
    .reports td.link {
        display: block;
        width: 70%;
        text-overflow: ellipsis;
        overflow: hidden ! important;
    }
</style>

*These are all the vulnerability reports we've disclosed through <a
href="https://hackerone.com/gratipay">our HackerOne program</a>.*

{% for header, group in groups %}
## {{ header }}
{% if not group %}None yet.{% else %}<table class="reports">
    {% for ts_mute, ts_pop, url, title in group %}
    <tr>
        <td class="ts">
            <span class="mute">{{ ts_mute }}</span><span class="pop">{{ ts_pop }}</span>
        </td>
        <td class="link"><a href="{{ url }}">{{ title|escape }}</a></td>
    </tr>
    {% endfor %}
</table>
{% endif %}
{% endfor %}
